- name: Check JournalNode status
  hosts: journalnode
  remote_user: "{{ remote_user }}"
  become: no
  tasks:
    - name: Set default status
      set_fact:
        cacheable: yes
        journalnode_status: "Journalnode is stopped."
      no_log: true
    - name: Check JournalNode jps
      command: "/usr/bin/jps"
      register: journalnode_jps
      changed_when: False
      no_log: true
    - name: Set status
      set_fact:
        cacheable: yes
        journalnode_status: "Journalnode is running."
      when: '"JournalNode" in journalnode_jps.stdout'
      no_log: true


- name: Check NameNode status
  hosts: namenode
  remote_user: "{{ remote_user }}"
  become: no
  tasks:
    - name: Set default status
      set_fact:
        cacheable: yes
        namenode_status: "NameNode is stopped."
      no_log: true
    - name: Check NameNode jps
      command: "/usr/bin/jps"
      register: namenode_jps
      changed_when: False
      no_log: true
    - name: Set status
      set_fact:
        cacheable: yes
        namenode_status: "NameNode is running."
      no_log: true
      when: '"NameNode" in namenode_jps.stdout'
    - name: Set default status
      set_fact:
        cacheable: yes
        zkfc_status: "DFSZKFailoverController is stopped."
      no_log: true
    - name: Set status
      set_fact:
        cacheable: yes
        zkfc_status: "DFSZKFailoverController is running."
      when: '"DFSZKFailoverController" in namenode_jps.stdout'
      no_log: true


- name: Check DataNode status
  hosts: datanode
  remote_user: "{{ remote_user }}"
  become: no
  tasks:
    - name: Set default status
      set_fact:
        cacheable: yes
        datanode_status: "DataNode is stopped."
      no_log: true
    - name: Check DataNode jps
      command: "/usr/bin/jps"
      register: datanode_jps
      changed_when: False
      no_log: true
    - name: Set status
      set_fact:
        cacheable: yes
        datanode_status: "DataNode is running."
      when: '"DataNode" in datanode_jps.stdout'
      no_log: true


- name: Check ResourceManager status
  hosts: resourcemanager
  remote_user: "{{ remote_user }}"
  become: no
  tasks:
    - name: Set default status
      set_fact:
        cacheable: yes
        resourcemanager_status: "ResourceManager is stopped."
      no_log: true
    - name: Check ResourceManager jps
      command: "/usr/bin/jps"
      register: resourcemanager_jps
      changed_when: False
      no_log: true
    - name: Set status
      set_fact:
        cacheable: yes
        resourcemanager_status: "ResourceManager is running."
      when: '"ResourceManager" in resourcemanager_jps.stdout'
      no_log: true


- name: Check NodeManager status
  hosts: nodemanager
  remote_user: "{{ remote_user }}"
  become: no
  tasks:
    - name: Set default status
      set_fact:
        cacheable: yes
        nodemanager_status: "NodeManager is stopped."
      no_log: true
    - name: Check NodeManager jps
      command: "/usr/bin/jps"
      register: nodemanager_jps
      changed_when: False
      no_log: true
    - name: Set status
      set_fact:
        cacheable: yes
        nodemanager_status: "NodeManager is running."
      when: '"NodeManager" in nodemanager_jps.stdout'
      no_log: true


- name: Check JobHistoryServer status
  hosts: jobhistoryserver
  remote_user: "{{ remote_user }}"
  become: no
  tasks:
    - name: Set default status
      set_fact:
        cacheable: yes
        jobhistoryserver_status: "JobHistoryServer is stopped."
      no_log: true
    - name: Check JobHistoryServer jps
      command: "/usr/bin/jps"
      register: jobhistoryserver_jps
      changed_when: False
      no_log: true
    - name: Set status
      set_fact:
        cacheable: yes
        jobhistoryserver_status: "JobHistoryServer is running."
      when: '"JobHistoryServer" in jobhistoryserver_jps.stdout'
      no_log: true


- name: Check HttpFSServerWebServer status
  hosts: httpfs
  remote_user: "{{ remote_user }}"
  become: no
  tasks:
    - name: Set default status
      set_fact:
        cacheable: yes
        httpfs_status: "HttpFSServerWebServer is stopped."
      no_log: true
    - name: Check JobHistoryServer jps
      command: "/usr/bin/jps"
      register: httpfs_jps
      changed_when: False
      no_log: true
    - name: Set status
      set_fact:
        cacheable: yes
        httpfs_status: "HttpFSServerWebServer is running."
      when: '"HttpFSServerWebServer" in httpfs_jps.stdout'
      no_log: true

- name: Show Hadoop status
  hosts: journalnode
  tasks:
    - name: JournalNode status
      debug:
        msg:
          - "{{ journalnode_status }}"


- name: Show Hadoop status
  hosts: namenode
  tasks:
    - name: NameNode status
      debug:
        msg:
          - "{{ namenode_status }}"


- name: Show Hadoop status
  hosts: datanode
  tasks:
    - name: DataNode status
      debug:
        msg:
          - "{{ datanode_status }}"


- name: Show Hadoop status
  hosts: resourcemanager
  tasks:
    - name: ResourceManager status
      debug:
        msg:
          - "{{ resourcemanager_status }}"


- name: Show Hadoop status
  hosts: nodemanager
  tasks:
    - name: NodeManager status
      debug:
        msg:
          - "{{ nodemanager_status }}"


- name: Show Hadoop status
  hosts: jobhistoryserver
  tasks:
    - name: JobHistoryServer status
      debug:
        msg:
          - "{{ jobhistoryserver_status }}"


- name: Show Hadoop status
  hosts: httpfs
  tasks:
    - name: HttpFSServerWebServer status
      debug:
        msg:
          - "{{ httpfs_status }}"