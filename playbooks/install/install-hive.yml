---

- name: Install Hive
  hosts: hive
  remote_user: "{{ remote_user }}"
  become: no
  vars:
    hive_home: "{{ bigdata_home }}/hive"
  tasks:
    - name: Create bigdata home directory
      become: yes
      file:
        dest: "{{ bigdata_home }}"
        state: directory
        owner: "{{ remote_user }}"
        group: "{{ remote_user }}"
    - name: Copy installer
      copy:
        src: "{{ installer_home }}/{{ installer.hive }}"
        dest: "{{ bigdata_home }}/{{ installer.hive }}"
    - name: Unzip installer
      unarchive:
        src: "{{ bigdata_home }}/{{ installer.hive }}"
        dest: "{{ bigdata_home }}/"
        remote_src: true
        owner: "{{ remote_user }}"
        group: "{{ remote_user }}"
    - name: Delete installer
      file:
        path: "{{ bigdata_home }}/{{ installer.hive }}"
        state: absent
    - name: Create Hive symbolic link
      file:
        src: "{{ bigdata_home }}/{{ installer.hive.replace('.tar.gz', '') }}"
        dest: "{{ hive_home }}"
        state: link
    - name: Copy Hive JDBC
      copy:
        src: "{{ installer_home }}/{{ installer.mariadb_jdbc }}"
        dest: "{{ hive_home }}/lib/"
    - name: Add hive configuration
      template:
        src: "{{ item }}"
        dest: "{{ hive_home }}/conf/"
        mode: 0644
      with_fileglob:
          - "{{ ansible_home }}/playbooks/edit/templates/hive/*"
#    - name: Add hive-site.xml
#      template:
#        src: hive/hive-site.xml
#        dest: "{{ hive_home }}/conf/hive-site.xml"
#        mode: 0644
#    - name: Add hive-log4j2.properties
#      template:
#        src: hive/hive-log4j2.properties
#        dest: "{{ hive_home }}/conf/hive-log4j2.properties"
#        mode: 0644
    - name: Edit Hive home
      lineinfile:
        path: "/home/{{ remote_user }}/.bashrc"
        line: "{{ item }}"
        insertafter: EOF
      with_items:
        - "export HIVE_HOME={{ bigdata_home }}/hive"
        - "PATH=$PATH:$HIVE_HOME/bin"
    - name: Refresh bash_profile
      shell: "source /home/{{ remote_user }}/.bashrc"
      args:
        executable: /bin/bash
    - name: Add htrace library
      copy:
        src: "{{ installer_home }}/tez/{{ item }}"
        dest: "{{ hive_home }}/lib/"
      with_items:
        - "htrace-core4-4.1.0-incubating.jar"

- name: Create hive metastore database
  hosts: mariadb
  remote_user: "{{ remote_user }}"
  become: no
  vars:
    hive_home: "{{ bigdata_home }}/hive"
  tasks:
    - name: Create Hive metastore database
      command: "{{ mariadb.home_dir }}/bin/mysql --socket={{ mariadb.socket_dir }}/mysql.sock -e 'CREATE DATABASE metastore;'"
      args:
        chdir: "{{ mariadb.home_dir }}"
    - name: Create metastore user
      shell: |
        bin/mysql --socket=mysql.sock -e "CREATE USER 'hive'@'{{ item }}' IDENTIFIED BY '{{ hive.metastore.db_pw }}';"
        bin/mysql --socket=mysql.sock -e "REVOKE ALL PRIVILEGES, GRANT OPTION FROM 'hive'@'{{ item }}';"
        bin/mysql --socket=mysql.sock -e "GRANT ALL PRIVILEGES ON metastore.* TO 'hive'@'{{ item }}';"
        bin/mysql --socket=mysql.sock -e "FLUSH PRIVILEGES;"
      args:
        chdir: "{{ mariadb.home_dir }}"
      with_items: "{{ groups['metastore'] }}"

- name: Create HDFS directory
  hosts: "{{ groups['namenode'][0] }}"
  remote_user: "{{ remote_user }}"
  become: no
  vars:
    hadoop_home: "{{ bigdata_home }}/hadoop"
  tasks:
    - name: Create Hive warehouse directory
      command: "{{ item }}"
      with_items:
        - "{{ hadoop_home }}/bin/hdfs dfs -mkdir /tmp"
        - "{{ hadoop_home }}/bin/hdfs dfs -mkdir -p /user/hive/warehouse"
        - "{{ hadoop_home }}/bin/hdfs dfs -chmod g+w /tmp"
        - "{{ hadoop_home }}/bin/hdfs dfs -chmod g+w /user/hive/warehouse"
      failed_when: false

- name: Install Tez
  hosts: hive-server2,nodemanager
  remote_user: "{{ remote_user }}"
  become: no
  vars:
    tez_home: "{{ bigdata_home }}/tez"
  tasks:
    - name: Copy installer
      copy:
        src: "{{ installer_home }}/tez/{{ installer.tez_min }}"
        dest: "{{ bigdata_home }}/{{ installer.tez_min }}"
    - name: Create Tez home directory
      file:
        path: "{{ bigdata_home }}/{{ installer.tez_min.replace('.tar.gz', '') }}"
        state: directory
    - name: Unzip installer
      unarchive:
        src: "{{ bigdata_home }}/{{ installer.tez_min }}"
        dest: "{{ bigdata_home }}/{{ installer.tez_min.replace('.tar.gz', '') }}/"
        remote_src: true
        owner: "{{ remote_user }}"
        group: "{{ remote_user }}"
    - name: Delete installer
      file:
        path: "{{ bigdata_home }}/{{ installer.tez_min }}"
        state: absent
    - name: Create Tez symbolic link
      file:
        src: "{{ bigdata_home }}/{{ installer.tez_min.replace('.tar.gz', '') }}"
        dest: "{{ tez_home }}"
        state: link
    - name: Create configuration directory
      file:
        path: "{{ tez_home }}/conf"
        state: directory
    - name: Add Tez configuration
      template:
        src: tez/{{ item }}
        dest: "{{ tez_home }}/conf/"
      with_items:
        - tez-site.xml
    - name: Add library
      copy:
        src: "{{ installer_home }}/tez/{{ item }}"
        dest: "{{ tez_home }}/lib/"
      with_items:
        - "hadoop-common-3.3.1.jar" # 3.3.4는 왜 안될까..?
        - "htrace-core4-4.1.0-incubating.jar"

- name: Upload Tez library
  hosts: "{{ groups['datanode'][0] }}"
  remote_user: "{{ remote_user }}"
  become: no
  tasks:
    - name: Create library directory
      command: "{{ bigdata_home }}/hadoop/bin/hdfs dfs -mkdir -p {{ tez.lib_dir }}"
    - name: Check library
      command: "{{ bigdata_home }}/hadoop/bin/hdfs dfs -ls {{ tez.lib_dir }}"
      register: check_tez_lib
    - name: Upload library
      command: "{{ bigdata_home }}/hadoop/bin/hdfs dfs -put {{ installer_home }}/tez/{{ installer.tez }} {{ tez.lib_dir }}/"
      when: 'installer.tez not in check_tez_lib.stdout'

# ANSI_QUOTOS 없으면 Metastore에서 에러가 나긴 하는데 기능상의 에러가 아닌 테스트 중 에러로 보인다.
#- name: Edit MariaDB configuration and restart
#  hosts: mariadb
#  remote_user: "{{ remote_user }}"
#  become: no
#  tasks:
#    - name: Edit configuration
#      lineinfile:
#        path: "{{ mariadb.home_dir }}/conf/my.cnf"
#        regexp: "^#? *{{ item.key | regex_escape() }}="
#        line: "{{ item.key }}={{ item.value }}"
#      with_dict:
#        - "sql_mode": "NO_BACKSLASH_ESCAPES"
#    - name: Stop MariaDB server
#      command: "{{ mariadb.home_dir }}/bin/mysqladmin shutdown --socket={{ mariadb.home_dir }}/mysql.sock "
#    - name: Start MariaDB server
#      shell: "/usr/bin/nohup {{ mariadb.home_dir }}/bin/mysqld_safe --defaults-file={{ mariadb.home_dir }}/conf/my.cnf --user={{ remote_user }} &"

- name: Init schema Metastore
  hosts: "{{ groups['metastore'][0] }}"
  remote_user: "{{ remote_user }}"
  become: no
  vars:
    hive_home: "{{ bigdata_home }}/hive"
  tasks:
    - name: Init schema
      shell: "{{ hive_home }}/bin/schematool --dbType mysql -initSchema"

#- name: Edit MariaDB configuration and restart
#  hosts: mariadb
#  remote_user: "{{ remote_user }}"
#  become: no
#  tasks:
#    - name: Edit configuration
#      lineinfile:
#        path: "{{ mariadb.home_dir }}/conf/my.cnf"
#        regexp: "^#? *{{ item.key | regex_escape() }}="
#        line: "{{ item.key }}={{ item.value }}"
#      with_dict:
#        - "sql_mode": "NO_BACKSLASH_ESCAPES,ANSI_QUOTES"
#    - name: Stop MariaDB server
#      command: "{{ mariadb.home_dir }}/bin/mysqladmin shutdown --socket={{ mariadb.home_dir }}/mysql.sock "
#    - name: Start MariaDB server
#      shell: "/usr/bin/nohup {{ mariadb.home_dir }}/bin/mysqld_safe --defaults-file={{ mariadb.home_dir }}/conf/my.cnf --user={{ remote_user }} &"

- name: Edit HCatalog configuration
  hosts: metastore
  remote_user: "{{ remote_user }}"
  become: no
  vars:
    hive_home: "{{ bigdata_home }}/hive"
  tasks:
    - name: Edit log path
      lineinfile:
        path: "{{ hive_home }}/hcatalog/sbin/hcat_server.sh"
        search_string: "HCAT_LOG_DIR=${HCAT_LOG_DIR:-\"$bin\"/../var/log}"
        line: "HCAT_LOG_DIR=${HIVE_HOME}/logs"
    - name: Create log directory
      file:
        path: "{{ hive_home }}/logs"
        state: directory
    - name: Edit metastore port
      lineinfile:
        path: "{{ hive_home }}/hcatalog/sbin/hcat_server.sh"
        search_string: "export METASTORE_PORT=${METASTORE_PORT:-9083}"
        line: "export METASTORE_PORT=${METASTORE_PORT:-{{ hive.metastore.metastore_port }}}"
    - name: Start HCatalog server
      command: "{{ hive_home }}/hcatalog/sbin/hcat_server.sh start"

- name: Start HiveServer2
  hosts: hive-server2
  remote_user: "{{ remote_user }}"
  become: no
  vars:
    hive_home: "{{ bigdata_home }}/hive"
  tasks:
    - name: Start HiveServer2
      shell: "/usr/bin/nohup {{ hive_home }}/bin/hiveserver2 > /dev/null 2>&1 &"





