---

- name: Install MySQL
  hosts: mysql
  remote_user: "{{ remote_user }}"
  become: no
  vars:
    mysql_home_parent: "{{ mysql.home_dir.replace('/mysql','') }}"
  tasks:
    - name: Copy pexpect tgz
      copy:
        src: "{{ installer_home }}/python/{{ installer.pexpect }}"
        dest: "/home/{{ remote_user }}/"
    - name: Unzip installer
      unarchive:
        src: "/home/{{ remote_user }}/pexpect.tgz"
        dest: "/home/{{ remote_user }}/"
        remote_src: true
    - name: Install pexpect
      pip:
        name:
          - "/home/{{ remote_user }}/pexpect/ptyprocess-0.7.0-py2.py3-none-any.whl"
          - "/home/{{ remote_user }}/pexpect/pexpect-4.8.0-py2.py3-none-any.whl"
        state: present
        executable: "/home/{{ remote_user }}/.pyenv/shims/pip"
    - name: Remove pexpect tgz
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "/home/{{ remote_user }}/pexpect.tgz"
        - "/home/{{ remote_user }}/pexpect"
    - name: Create home directory
      file:
        path: "{{ mysql_home_parent }}"
        state: directory
    - name: Copy installer
      copy:
        src: "{{ installer_home }}/mysql/{{ installer.mysql }}"
        dest: "{{ mysql_home_parent }}/{{ installer.mysql }}"
    - name: Unzip installer
      unarchive:
        src: "{{ mysql_home_parent }}/{{ installer.mysql }}"
        dest: "{{ mysql_home_parent }}/"
        remote_src: true
        owner: "{{ remote_user }}"
        group: "{{ remote_user }}"
        creates: "{{ mysql.home_dir }}"
    - name: Delete installer
      file:
        path: "{{ mysql_home_parent }}/{{ installer.mysql }}"
        state: absent
    - name: Create MySQL symbolic link
      file:
        src: "{{ mysql_home_parent }}/{{ installer.mysql.replace('.tar.xz', '') }}"
        dest: "{{ mysql.home_dir }}"
        state: link
    - name: Create configuration and log directory
      file:
        path: "{{ mysql.home_dir }}/{{ item }}"
        state: directory
      with_items:
        - conf
        - logs
    - name: Create configuration file
      template:
        src: mysql/my.cnf
        dest: "{{ mysql.home_dir }}/conf/"
        mode: 0644
    - name: Create data directory
      become: yes
      file:
        path: "{{ mysql.data_dir }}"
        state: directory
        owner: "{{ remote_user }}"
    - name: Install OS Library
      become: yes
      yum:
        name:
          - "libaio"
          - "numactl"
    - name: Check already format (1/3)
      stat:
        path: "{{ mysql.data_dir }}/mysql"
      register: my_result
      failed_when: false
    - name: Check already format (2/3)
      stat:
        path: "{{ mysql.data_dir }}/sys"
      register: sys_result
      failed_when: false
    - name: Check already format (3/3)
      stat:
        path: "{{ mysql.data_dir }}/performance_schema"
      register: perf_result
      failed_when: false
    - name: Check OS version
      shell: "/usr/bin/cat /etc/os-release | grep '^PRETTY'"
      register: os_version
    - name: Create libtinfo.so.5 symlink
      become: yes
      shell: "/usr/bin/ln -sf /usr/lib64/libncurses.so.6 /usr/lib64/libtinfo.so.5"
      when: '"Red Hat Enterprise Linux 8" in os_version.stdout'
    - name: Install MySQL
      command: "{{ mysql.home_dir }}/bin/mysqld --defaults-file={{ mysql.home_dir }}/conf/my.cnf --initialize-insecure --user={{ remote_user }}"
      when: >
        (not my_result.stat.exists)
        and
        (not sys_result.stat.exists)
        and
        (not perf_result.stat.exists)
    - name: Check MySQL ps
      shell: "/usr/bin/ps -ef | grep -v grep | grep 'mysqld' | grep 'port={{ mysql.jdbc_port }}'"
      register: mysql_ps
      failed_when: false
    - name: Start MySQL
      shell: "/usr/bin/nohup {{ mysql.home_dir }}/bin/mysqld_safe --defaults-file={{ mysql.home_dir }}/conf/my.cnf --user={{ remote_user }} &"
      when: '"mysqld" not in mysql_ps.stdout'
    - name: Secure installation
      expect:
        command: "{{ mysql.home_dir }}/bin/mysql_secure_installation --defaults-file={{ mysql.home_dir }}/conf/my.cnf"
        responses:
          'Press y|Y for Yes, any other key for No:': 'n'
          'New password:': "{{ mysql.root_pw }}"
          'Re-enter new password:': "{{ mysql.root_pw }}"
          'Remove anonymous users\? \(Press y|Y for Yes, any other key for No\) :': 'y'
          'Disallow root login remotely\? \(Press y|Y for Yes, any other key for No\) :': 'y'
          'Remove test database and access to it\? \(Press y|Y for Yes, any other key for No\) :': 'y'
          'Reload privilege tables now\? \(Press y|Y for Yes, any other key for No\) :': 'y'
      when: >
        (not my_result.stat.exists)
        and
        (not sys_result.stat.exists)
        and
        (not perf_result.stat.exists)
    - name: Test MySQL
      command: "{{ mysql.home_dir }}/bin/mysql -uroot -p{{ mysql.root_pw }} --socket={{ mysql.socket_dir }}/mysql.sock -e 'SHOW DATABASES;'"
      register: test_result
    - name: Test result
      debug:
        var: test_result
