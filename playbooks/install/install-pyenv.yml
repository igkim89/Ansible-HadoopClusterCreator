---

- name: Install pyenv
  hosts: pyenv
  remote_user: "{{ remote_user }}"
  become: no
  vars:
    pyenv_home: "/home/{{ remote_user }}/.pyenv"
    python_version: "{{ installer.python.replace('Python-', '').replace('.tar.xz', '') }}"
  tasks:
    - name: Copy installer
      copy:
        src: "{{ installer_home }}/python/{{ installer.pyenv }}"
        dest: "/home/{{ remote_user }}/"
    - name: Unzip installer
      unarchive:
        src: "/home/{{ remote_user }}/{{ installer.pyenv }}"
        dest: "/home/{{ remote_user }}/"
        remote_src: true
        creates: "/home/{{ remote_user }}/pyenv-installer-master"
    - name: Check pyenv installed (1/2)
      stat:
        path: "{{ pyenv_home }}/bin"
      register: bin_result
      failed_when: false
    - name: Check pyenv installed (2/2)
      stat:
        path: "{{ pyenv_home }}/src"
      register: src_result
      failed_when: false
    - name: Install pyenv
      command: "/home/{{ remote_user }}/pyenv-installer-master/bin/pyenv-offline-installer"
      when: >
        (not bin_result.stat.exists)
        and
        (not src_result.stat.exists)
    - name: Update PATH
      lineinfile:
        path: "/home/{{ remote_user }}/.bashrc"
        line: "{{ item }}"
        insertafter: EOF
      with_items:
        - 'export PYENV_ROOT="$HOME/.pyenv"'
        - 'command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"'
        - 'eval "$(pyenv init -)"'
        - 'eval "$(pyenv virtualenv-init -)"'
    - name: Delete installer
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "/home/{{ remote_user }}/{{ installer.pyenv }}"
        - "/home/{{ remote_user }}/pyenv-installer-master"
    - name: Create python directory
      file:
        path: "{{ pyenv_home }}/cache"
        state: directory
    - name: Copy python installer
      copy:
        src: "{{ installer_home }}/python/{{ installer.python }}"
        dest: "{{ pyenv_home }}/cache/"
    - name: Install yum library
      become: true
      yum:
        name:
          - "patch"
          - "bzip2-devel"
          - "ncurses-devel"
          - "readline-devel"
          - "sqlite-devel"
          - "openssl-devel"
          - "libffi-devel"
          - "@Development tools"
        state: present
    - name: Check python installed
      stat:
        path: "{{ pyenv_home }}/versions/{{ python_version }}"
      register: py_result
      failed_when: false
    - name: Install Python
      command: "{{ pyenv_home }}/bin/pyenv install -v {{ python_version }}"
      when: not py_result.stat.exists
    - name: Check global python version
      shell: "{{ pyenv_home }}/bin/pyenv global"
      register: global_result
      failed_when: false
    - name: Update Global python version
      command: "{{ pyenv_home }}/bin/pyenv global {{ python_version }}"
      when: 'python_version not in global_result.stdout'
    - name: Copy pexpect tgz
      copy:
        src: "{{ installer_home }}/python/{{ installer.pexpect }}"
        dest: "/home/{{ remote_user }}/"
    - name: Unzip installer
      unarchive:
        src: "/home/{{ remote_user }}/pexpect.tgz"
        dest: "/home/{{ remote_user }}/"
        remote_src: true
    - name: Install pexpect
      pip:
        name:
          - "/home/{{ remote_user }}/pexpect/ptyprocess-0.7.0-py2.py3-none-any.whl"
          - "/home/{{ remote_user }}/pexpect/pexpect-4.8.0-py2.py3-none-any.whl"
        state: present
        executable: "/home/{{ remote_user }}/.pyenv/shims/pip"
    - name: Remove pexpect tgz
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "/home/{{ remote_user }}/pexpect.tgz"
        - "/home/{{ remote_user }}/pexpect"