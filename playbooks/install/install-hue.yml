---

- name: All nodes collector
  hosts: bigdata

# 다 안돼서 docker로 함
# docker repository kdev01에 구성 후 docker 설치
# docker image 'hue-4.10.0' load
# docker compose 실행

- name: Install Hue in Docker
  hosts: hue
  remote_user: "{{ remote_user }}"
  become: no
  vars:
    hue_home: "{{ bigdata_home }}/hue"
    mysql_ip: "{{ hostvars[groups['mysql'][0]]['ansible_default_ipv4']['address'] }}"
    nn_ip: "{{ hostvars[groups['namenode'][0]]['ansible_default_ipv4']['address'] }}"
  tasks:
    - name: Create bigdata home directory
      become: yes
      file:
        dest: "{{ bigdata_home }}"
        state: directory
        owner: "{{ remote_user }}"
        group: "{{ remote_user }}"
    - name: Create Hue home directory
      file:
        path: "{{ bigdata_home }}/hue-4.10.0"
        state: directory
        owner: "{{ remote_user }}"
        group: "{{ remote_user }}"
    - name: Create Hue home symbolic link
      file:
        src: "{{ bigdata_home }}/hue-4.10.0"
        dest: "{{ hue_home }}"
        state: link
    - name: Create Hue bin directory
      file:
        path: "{{ hue_home }}/bin"
        state: directory
    - name: Create Hue conf directory
      file:
        path: "{{ hue_home }}/conf"
        state: directory
    - name: Create Hue logs directory
      file:
        path: "{{ hue_home }}/logs"
        state: directory
    - name: Add configuration files
      template:
        src: "hue/{{ item.key }}"
        dest: "{{ item.value }}"
      with_dict:
        "docker-compose.yml": "{{ hue_home }}"
        "hue.ini": "{{ hue_home }}/conf"
    - name: Update docker yum repolist
      become: yes
      copy:
        src: "{{ ansible_home }}/playbooks/edit/templates/docker/docker-ce.repo"
        dest: "/etc/yum.repos.d/docker-ce.repo"
    - name: Install Docker
      become: yes
      yum:
        name:
          - "docker-ce"
          - "docker-ce-cli"
          - "containerd.io"
          - "docker-compose-plugin"
    - name: Start Docker
      become: yes
      systemd:
        name: docker
        state: started
        enabled: true
    - name: Copy Hue image
      copy:
        src: "{{ installer_home }}/hue/{{ installer.hue }}"
        dest: "{{ hue_home }}"
    - name: Load image
      become: yes
      command: "/usr/bin/docker load -i {{ hue_home }}/{{ installer.hue }}"

- name: Init metadata DB
  hosts: mysql
  remote_user: "{{ remote_user }}"
  become: no
  tasks:
    - shell: |
        bin/mysql --socket=mysql.sock -uroot -p{{ mysql.root_pw }} -e "CREATE DATABASE if not exists {{ hue.database_name }};"
        bin/mysql --socket=mysql.sock -uroot -p{{ mysql.root_pw }} -e "CREATE USER '{{ hue.database_id }}'@'localhost' IDENTIFIED BY '{{ hue.database_pw }}';"
        bin/mysql --socket=mysql.sock -uroot -p{{ mysql.root_pw }} -e "GRANT ALL PRIVILEGES ON {{ hue.database_name }}.* TO '{{ hue.database_id }}'@'localhost';"
        bin/mysql --socket=mysql.sock -uroot -p{{ mysql.root_pw }} -e "CREATE USER '{{ hue.database_id }}'@'{{ item }}' IDENTIFIED BY '{{ hue.database_pw }}';"
        bin/mysql --socket=mysql.sock -uroot -p{{ mysql.root_pw }} -e "GRANT ALL PRIVILEGES ON {{ hue.database_name }}.* TO '{{ hue.database_id }}'@'{{ item }}';"
      args:
        chdir: "{{ mysql.home_dir }}"
      with_items: "{{ groups['mysql'] }}"

- name: Start Hue server
  hosts: hue
  remote_user: "{{ remote_user }}"
  become: yes
  vars:
    hue_home: "{{ bigdata_home }}/hue"
  tasks:
    - name: Check Hue process
      shell: "/usr/bin/docker compose -f {{ hue_home }}/docker-compose.yml ps -a | grep hue | grep ago | grep Up"
      register: hue_ps
      failed_when: false
    - name: Start Hue server
      command: "/usr/bin/docker compose -f {{ hue_home }}/docker-compose.yml up -d"
      when: '"hue-server" not in hue_ps.stdout'
