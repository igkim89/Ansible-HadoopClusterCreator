---

- name: All nodes collector
  hosts: bigdata

- name: Install Ranger
  hosts: ranger
  remote_user: "{{ remote_user }}"
  become: no
  vars:
    solr_home: "{{ bigdata_home }}/solr"
    ranger_home: "{{ bigdata_home }}/ranger"
  tasks:
    - name: Create Create bigdata home directory
      become: yes
      file:
        dest: "{{ item }}"
        state: directory
        owner: "{{ remote_user }}"
        group: "{{ remote_user }}"
      with_items:
        - "{{ bigdata_home }}"
        - "/var/run/ranger"
    - name: Copy JDBC
      become: yes
      copy:
        src: "{{ installer_home }}/jdbc/{{ installer.mysql_jdbc }}"
        dest: "/usr/share/java/{{ installer.mysql_jdbc }}"
        owner: "{{ remote_user }}"
        group: "{{ remote_user }}"
    - name: Create JDBC symbolic link
      become: yes
      file:
        src: "/usr/share/java/{{ installer.mysql_jdbc }}"
        dest: "/usr/share/java/mysql-connector-java.jar"
        state: link
        owner: "{{ remote_user }}"
        group: "{{ remote_user }}"

    ## JDK 11 install (Solr 9.0부터 jdk 11 필요)
    - name: Copy JDK11 Installer
      copy:
        src: "{{ installer_home }}/jdk/{{ installer.jdk11 }}"
        dest: "{{ bigdata_home }}/{{ installer.jdk11 }}"
    - name: Unzip JDK11 installer
      unarchive:
        src: "{{ bigdata_home }}/{{ installer.jdk11 }}"
        dest: "{{ bigdata_home }}/"
        remote_src: true
        owner: "{{ remote_user }}"
        group: "{{ remote_user }}"
        creates: "{{ bigdata_home }}/jdk-11"
    - name: Delete JDK11 installer
      file:
        path: "{{ bigdata_home }}/{{ installer.jdk11 }}"
        state: absent

    ## Solr install (Ranger audit)
    - name: Copy Solr installer
      copy:
        src: "{{ installer_home }}/ranger/{{ installer.solr }}"
        dest: "{{ bigdata_home }}/{{ installer.solr }}"
    - name: Unzip Solr installer
      unarchive:
        src: "{{ bigdata_home }}/{{ installer.solr }}"
        dest: "{{ bigdata_home }}/"
        remote_src: true
        owner: "{{ remote_user }}"
        group: "{{ remote_user }}"
        creates: "{{ solr_home }}"
    - name: Delete Solr installer
      file:
        path: "{{ bigdata_home }}/{{ installer.solr }}"
        state: absent
    - name: Create Solr symbolic link
      file:
        src: "{{ bigdata_home }}/{{ installer.solr.replace('.tgz', '') }}"
        dest: "{{ solr_home }}"
        state: link
    - name: Create Solr data directory
      become: yes
      file:
        path: "{{ ranger.solr.data_dir }}"
        state: directory
        owner: "{{ remote_user }}"
        group: "{{ remote_user }}"
#    - name: Edit Solr configuration
#      lineinfile:
#        path: "{{ solr_home }}/bin/solr.in.sh"
#        regexp: "^#? *{{ item.key }}="
#        line: "{{ item.key }}=\"{{ item.value }}\""
#      with_dict:
#        "SOLR_JAVA_HOME": "{{ bigdata_home }}/jdk-11"
#        "ZK_HOST": "{% for zoo in groups['zookeeper'] %}{% if zoo != groups['zookeeper'][0] %},{% endif %}{{ zoo }}:{{ zookeeper.client_port }}{% endfor %}"
#        "SOLR_HEAP": "{{ ranger.solr.heapsize }}"
#        "SOLR_TIMEZONE": "Asia/Seoul"
#        "SOLR_DATA_HOME": "{{ ranger.solr.data_dir }}"
#        "SOLR_IP_ALLOWLIST": "127.0.0.1, 192.168.251.186"


    - name: Copy Ranger installer
      copy:
        src: "{{ installer_home }}/ranger/{{ installer.ranger_admin }}"
        dest: "{{ bigdata_home }}/{{ installer.ranger_admin }}"
    - name: Unzip Ranger installer
      unarchive:
        src: "{{ bigdata_home }}/{{ installer.ranger_admin }}"
        dest: "{{ bigdata_home }}/"
        remote_src: true
        owner: "{{ remote_user }}"
        group: "{{ remote_user }}"
        creates: "{{ ranger_home }}"
    - name: Delete Ranger installer
      file:
        path: "{{ bigdata_home }}/{{ installer.ranger_admin }}"
        state: absent
    - name: Create Ranger symbolic link
      file:
        src: "{{ bigdata_home }}/{{ installer.ranger_admin.replace('.tar.gz', '') }}"
        dest: "{{ ranger_home }}"
        state: link
    - name: Edit Solr for audit setup
      lineinfile:
        path: "{{ ranger_home }}/contrib/solr_for_audit_setup/install.properties"
        regexp: "^{{ item.key }}="
        line: "{{ item.key }}={{ item.value }}"
      with_dict:
        "SOLR_USER": "{{ remote_user }}"
        "SOLR_GROUP": "{{ remote_user }}"
        "SOLR_INSTALL_FOLDER": "{{ solr_home }}"
        "SOLR_RANGER_HOME": "{{ solr_home }}/ranger_audit_server"
        "SOLR_RANGER_PORT": "{{ ranger.solr.web_port }}"
        "SOLR_RANGER_DATA_FOLDER": "{{ ranger.solr.data_dir }}"
        "SOLR_LOG_FOLDER": "{{ solr_home }}/logs"
        "SOLR_MAX_MEM": "{{ ranger.solr.heapsize }}"
        ## Solr cloud 미적용시 아래 두줄 주석
        "SOLR_DEPLOYMENT": "solrcloud"
        "SOLR_ZK": "{% for zoo in groups['zookeeper'] %}{% if zoo != groups['zookeeper'][0] %},{% endif %}{{ zoo }}:{{ zookeeper.client_port }}{% endfor %}/solr"

    - name: Check Solr setup
      stat:
        path: "{{ solr_home }}/ranger_audit_server"
      register: solr_result
      failed_when: false
    - name: Edit JAVA_HOME in setup.sh
      lineinfile:
        path: "{{ ranger_home }}/contrib/solr_for_audit_setup/setup.sh"
        insertbefore: "curr_dir=`pwd`"
        regexp: "^JAVA_HOME=\"/"
        line: "JAVA_HOME={{ bigdata_home }}/jdk-11"
    - name: Setup Solr
      shell: "./setup.sh"
      args:
        chdir: "{{ ranger_home }}/contrib/solr_for_audit_setup"
      when: not solr_result.stat.exists
    - name: Edir Solr.in.sh (1/3)
      lineinfile:
        path: "{{ solr_home }}/ranger_audit_server/scripts/solr.in.sh"
        regexp: "^{{ item.key }}="
        line: "{{ item.key }}={{ item.value }}"
      with_dict:
        "SOLR_JAVA_HOME": "{{ bigdata_home }}/jdk-11"
        "GC_LOG_OPTS": "\"-verbose:gc -XX:+PrintGCDetails\""
    - name: Edir Solr.in.sh (2/3)
      lineinfile:
        path: "{{ solr_home }}/ranger_audit_server/scripts/solr.in.sh"
        search_string: "{{ item }}"
        state: absent
      with_items:
        - "-XX:+UseConcMarkSweepGC \\"
        - "-XX:+UseParNewGC \\"
        - "-XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+PrintTenuringDistribution -XX:+PrintGCApplicationStoppedTime\""
    - name: Edir Solr.in.sh (3/3)
      lineinfile:
        path: "{{ solr_home }}/ranger_audit_server/scripts/solr.in.sh"
        regexp: "^{{ item.key }}="
        line: "{{ item.key }}={{ item.value }}"
        insertafter: "^SOLR_PORT={{ ranger.solr.web_port }}"
      with_dict:
        "SOLR_JETTY_HOST": "0.0.0.0"

- name: Check Solr installed
  hosts: "{{ groups['zookeeper'][0] }}"
  remote_user: "{{ remote_user }}"
  become: no
  vars:
    zk_home: "{{ bigdata_home }}/zookeeper"
  tasks:
    - name: Check z-node
      shell: "{{ zk_home }}/bin/zkCli.sh -server {% for zoo in groups['zookeeper'] %}{% if zoo != groups['zookeeper'][0] %},{% endif %}{{ zoo }}:{{ zookeeper.client_port }}{% endfor %} ls /"
      register: zk_result
      failed_when: false
    - name: Add host
      add_host:
        name: zk
        meta_result: "{{ zk_result.stdout }}"


- name: Install Ranger
  hosts: ranger
  remote_user: "{{ remote_user }}"
  become: no
  vars:
    solr_home: "{{ bigdata_home }}/solr"
    ranger_home: "{{ bigdata_home }}/ranger"
    zk_var: hostvars[groups['zk'].0].zk_result
  tasks:
    - name: Edit add_ranger_audits_conf_to_zk.sh file
      lineinfile:
        path: "{{ solr_home }}/ranger_audit_server/scripts/add_ranger_audits_conf_to_zk.sh"
        regexp: "^{{ item.key }}="
        line: "{{ item.key }}={{ item.value }}"
      with_dict:
        "JAVA_HOME": "{{ bigdata_home }}/jdk-11"
    - name: Edit Solr zkcli.sh file
      lineinfile:
        path: "{{ solr_home }}/server/scripts/cloud-scripts/zkcli.sh"
        insertafter: 'JVM="java"'
        regexp: "^{{ item.key }}="
        line: "{{ item.key }}={{ item.value }}"
      with_dict:
        "JAVA_HOME": "{{ bigdata_home }}/jdk-11"
    - name: Create Z-Node
      shell: "./add_ranger_audits_conf_to_zk.sh"
      args:
        chdir: "{{ solr_home }}/ranger_audit_server/scripts"
      when: '"solr" not in zk_var'
    - name: Find Solr server ps
      shell: "/usr/bin/ps -ef | grep -v grep | grep 'solr' | grep 'start.jar' | grep 'jetty.port={{ ranger.solr.web_port }}'"
      register: solr_ps
      failed_when: false
    - name: Start Solr
      shell: "./start_solr.sh"
      args:
        chdir: "{{ solr_home }}/ranger_audit_server/scripts"
      when: '"solr" not in solr_ps.stdout'
    - name: Edit create_ranger_audits_collection.sh file
      lineinfile:
        path: "{{ solr_home }}/ranger_audit_server/scripts/create_ranger_audits_collection.sh"
        regexp: "^{{ item.key }}="
        line: "{{ item.key }}={{ item.value }}"
        insertbefore: "^SOLR_HOST_URL"
      with_dict:
        "SOLR_RANGER_PORT": "{{ ranger.solr.web_port }}"
    - name: Create Ranger audit collection
      shell: "./create_ranger_audits_collection.sh"
      args:
        chdir: "{{ solr_home }}/ranger_audit_server/scripts"
      when: '"solr" not in zk_var'

    - name: Edit ranger install.properties
      lineinfile:
        path: "{{ ranger_home }}/install.properties"
        regexp: "^{{ item.key }}="
        line: "{{ item.key }}={{ item.value }}"
      with_dict:
        "db_root_user": "root"
        "db_root_password": "{{ mysql.root_pw }}"
        "db_host": "{{ groups['mysql'][0] }}:{{ mysql.jdbc_port }}"
        "db_ssl_enabled": "true"
        "db_name": "{{ ranger.db_name }}"
        "db_user": "{{ ranger.db_user }}"
        "db_password": "{{ ranger.db_pw }}"
        "rangerAdmin_password": "{{ ranger.admin_pw }}"
        "rangerTagsync_password": "{{ ranger.admin_pw }}"
        "rangerUsersync_password": "{{ ranger.admin_pw }}"
        "keyadmin_password": "{{ ranger.admin_pw }}"
        "audit_store": "solr"
        "audit_solr_urls": "http://localhost:{{ ranger.solr.web_port }}/solr/ranger_audits"
        ## 임시 Port 변경 방법
        # $RANGER_HOME/conf/ranger-admin-site.xml
        # ranger.service.http.port 변경
        # $RANGER_HOME/ews/stop-ranger-admin.sh
        # $RANGER_HOME/ews/start-ranger-admin.sh
        "policymgr_external_url": "http://localhost:{{ ranger.web_port }}"
        "unix_user": "{{ remote_user }}"
        "unix_group": "{{ remote_user }}"
        "hadoop_conf": "{{ bigdata_home }}/hadoop/conf"


- name: Setting up a Ranger Database
  hosts: mysql
  remote_user: "{{ remote_user }}"
  become: no
  vars:
  tasks:
    - name: Create DB, User
      shell: |
        bin/mysql -uroot -p{{ mysql.root_pw }} --socket={{ mysql.socket_dir }}/mysql.sock -e "GRANT ALL PRIVILEGES ON {{ ranger.db_name }}.* TO '{{ ranger.db_user }}'@'localhost' with grant option;"
        bin/mysql -uroot -p{{ mysql.root_pw }} --socket={{ mysql.socket_dir }}/mysql.sock -e "CREATE DATABASE if not exists {{ ranger.db_name }};"
        bin/mysql -uroot -p{{ mysql.root_pw }} --socket={{ mysql.socket_dir }}/mysql.sock -e "CREATE USER if not exists '{{ ranger.db_user }}'@'localhost' IDENTIFIED BY '{{ ranger.db_pw }}';"
        bin/mysql -uroot -p{{ mysql.root_pw }} --socket={{ mysql.socket_dir }}/mysql.sock -e "GRANT ALL PRIVILEGES ON {{ ranger.db_name }}.* TO '{{ ranger.db_user }}'@'localhost';"
      args:
        chdir: "{{ mysql.home_dir }}"
    - name: Create DB, User
      shell: |
        bin/mysql -uroot -p{{ mysql.root_pw }} --socket={{ mysql.socket_dir }}/mysql.sock -e "GRANT ALL PRIVILEGES ON {{ ranger.db_name }}.* TO '{{ ranger.db_user }}'@'{{ item }}' with grant option;"
        bin/mysql -uroot -p{{ mysql.root_pw }} --socket={{ mysql.socket_dir }}/mysql.sock -e "CREATE USER if not exists '{{ ranger.db_user }}'@'{{ item }}' IDENTIFIED BY '{{ ranger.db_pw }}';"
        bin/mysql -uroot -p{{ mysql.root_pw }} --socket={{ mysql.socket_dir }}/mysql.sock -e "GRANT ALL PRIVILEGES ON {{ ranger.db_name }}.* TO '{{ ranger.db_user }}'@'{{ item }}';"
        bin/mysql -uroot -p{{ mysql.root_pw }} --socket={{ mysql.socket_dir }}/mysql.sock -e "CREATE USER if not exists 'root'@'{{ item }}' IDENTIFIED BY '{{ mysql.root_pw }}';"
        bin/mysql -uroot -p{{ mysql.root_pw }} --socket={{ mysql.socket_dir }}/mysql.sock -e "GRANT ALL PRIVILEGES ON mysql.* TO 'root'@'{{ item }}' WITH GRANT OPTION;"
        bin/mysql -uroot -p{{ mysql.root_pw }} --socket={{ mysql.socket_dir }}/mysql.sock -e "GRANT ALL PRIVILEGES ON {{ ranger.db_name }}.* TO 'root'@'{{ item }}' WITH GRANT OPTION;"
        bin/mysql -uroot -p{{ mysql.root_pw }} --socket={{ mysql.socket_dir }}/mysql.sock -e "GRANT RELOAD ON *.* TO 'root'@'{{ item }}';"
      args:
        chdir: "{{ mysql.home_dir }}"
      with_items: "{{ groups['ranger'] }}"


- name: Install Ranger
  hosts: ranger
  remote_user: "{{ remote_user }}"
  become: no
  vars:
    solr_home: "{{ bigdata_home }}/solr"
    ranger_home: "{{ bigdata_home }}/ranger"
  tasks:
    - name: Check Ranger setup
      stat:
        path: "{{ ranger_home }}/ews/webapp/WEB-INF/classes/conf"
      register: ranger_result
      failed_when: false
    - name: Edit Ranger setup.sh file
      lineinfile:
        path: "{{ ranger_home }}/setup.sh"
        insertafter: "# This script"
        regexp: "^{{ item.key }}="
        line: "{{ item.key }}={{ item.value }}"
      with_dict:
        "JAVA_HOME": "{{ java_home }}"
    - name: Edit http port property (1/3)
      lineinfile:
        path: "{{ ranger_home }}/install.properties"
        insertafter: "DB CONFIG - END"
        line: |

          #
          # ------- Ranger HTTP CONFIG ----------------
          #

          ranger_service_http_port={{ ranger.web_port }}

    - name: Edit http port property (2/3)
      lineinfile:
        path: "{{ ranger_home }}/setup.sh"
        insertbefore: "propertyName=ranger.externalurl"
        line: |
          propertyName=ranger.service.http.port
          newPropertyValue="${ranger_service_http_port}"
          updatePropertyToFilePy $propertyName $newPropertyValue $to_file_ranger

    - name: Edit http port property (3/3)
      lineinfile:
        path: "{{ ranger_home }}/setup.sh"
        insertbefore: "policymgr_external_url="
        line: "ranger_service_http_port=$(get_prop 'ranger_service_http_port' $PROPFILE)"
    - name: Setup Ranger
      shell: "./setup.sh"
      args:
        chdir: "{{ ranger_home }}"
      when: not ranger_result.stat.exists
    - name: Check Ranger server ps
      shell: "/usr/bin/ps -ef | grep -v grep | grep 'org.apache.ranger.server.tomcat.EmbeddedServer'"
      register: ranger_ps
      failed_when: false
    - name: Start Ranger server
      shell: "./ranger-admin-services.sh start"
      args:
        chdir: "{{ ranger_home }}/ews"
      when: '"ranger" not in ranger_ps.stdout'
