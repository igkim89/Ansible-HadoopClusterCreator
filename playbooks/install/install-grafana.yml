---

- name: Install Grafana
  hosts: grafana
  remote_user: "{{ remote_user }}"
  become: no
  vars:
    grafana_home: "{{ bigdata_home }}/grafana"
  tasks:
    - name: Create Create bigdata home directory
      become: yes
      file:
        dest: "{{ bigdata_home }}"
        state: directory
        owner: "{{ remote_user }}"
        group: "{{ remote_user }}"
    - name: Copy installer
      copy:
        src: "{{ installer_home }}/grafana/{{ installer.grafana }}"
        dest: "{{ bigdata_home }}/{{ installer.grafana }}"
    - name: Unzip installer
      unarchive:
        src: "{{ bigdata_home }}/{{ installer.grafana }}"
        dest: "{{ bigdata_home }}/"
        remote_src: true
        owner: "{{ remote_user }}"
        group: "{{ remote_user }}"
    - name: Delete installer
      file:
        path: "{{ bigdata_home }}/{{ installer.grafana }}"
        state: absent
    - name: Create Grafana symbolic link
      file:
        src: "{{ bigdata_home }}/{{ installer.grafana.replace('.linux-amd64.tar.gz', '').replace('-enterprise', '') }}"
        dest: "{{ grafana_home }}"
        state: link
    - name: Create log directory
      file:
        path: "{{ grafana_home }}/logs"
        state: directory
    - name: Edit Grafana configuration
      lineinfile:
        path: "{{ grafana_home }}/conf/defaults.ini"
        regexp: "^{{ item.key }} = "
        line: "{{ item.key }} = {{ item.value }}"
      with_dict:
        "http_port": "{{ grafana.web_port }}"
        "admin_email": "igkim@daou.co.kr"
    - name: Check grafana process
      shell: "/usr/bin/ps -ef | grep 'grafana server' | grep -v grep"
      register: grafana_status
      failed_when: false
    - name: Start Grafana
      shell: "/usr/bin/nohup {{ grafana_home }}/bin/grafana-server --config {{ grafana_home }}/conf/defaults.ini --homepath {{ grafana_home }} web > {{ grafana_home }}/logs/grafana.log 2>&1 &"
      when: '"grafana server" not in grafana_status.stdout'

