<?xml version="1.0" encoding="UTF-8" ?>

<configuration>
    <property>
        <name>yarn.acl.enable</name>
        <value>true</value>
    </property>
    <property>
        <name>yarn.admin.acl</name>
        <value>*</value>
    </property>
    <property>
        <name>yarn.log-aggregation-enable</name>
        <value>true</value>
    </property>
    <property>
        <name>yarn.log-aggregation.retain-seconds</name>
        <value>604800</value>
    </property>
    <property>
        <name>yarn.nodemanager.log.retain-seconds</name>
        <value>10800</value>
    </property>
    <property>
        <name>yarn.resourcemanager.ha.enabled</name>
        <value>true</value>
    </property>
    <property>
        <name>yarn.resourcemanager.ha.automatic-failover.enabled</name>
        <value>true</value>
    </property>
    <property>
        <name>yarn.resourcemanager.ha.automatic-failover.embedded</name>
        <value>true</value>
    </property>
    <property>
        <name>yarn.resourcemanager.recovery.enabled</name>
        <value>true</value>
    </property>
    <property>
        <name>yarn.resourcemanager.zk-address</name>
        <value>{% for zoo in groups['zookeeper'] %}{% if zoo != groups['zookeeper'][0] %},{% endif %}{{ zoo }}:{{ zookeeper.client_port }}{% endfor %}</value>
    </property>
    <property>
        <name>yarn.nodemanager.aux-services</name>
        <value>mapreduce_shuffle</value>
    </property>
    <property>
        <name>yarn.nodemanager.aux-services.mapreduce_shuffle.class</name>
        <value>org.apache.hadoop.mapred.ShuffleHandler</value>
    </property>
    <property>
        <name>yarn.resourcemanager.store.class</name>
        <value>org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore</value>
    </property>
    <property>
        <name>yarn.client.failover-sleep-base-ms</name>
        <value>100</value>
    </property>
    <property>
        <name>yarn.client.failover-sleep-max-ms</name>
        <value>2000</value>
    </property>
    <property>
        <name>yarn.resourcemanager.cluster-id</name>
        <value>{{ hadoop.yarn.cluster_id }}</value>
    </property>
    <property>
        <name>yarn.resourcemanager.ha.rm-ids</name>
        <value>{% for rm in groups['resourcemanager'] %}{% if rm != groups['resourcemanager'][0] %},{% endif %}{{ rm }}{% endfor %}</value>
    </property>
    <property>
        <name>yarn.resourcemanager.admin.address.{{ groups['resourcemanager'][0] }}</name>
        <value>{{ groups['resourcemanager'][0] }}:{{ hadoop.yarn.resourcemanager_admin_port }}</value>
    </property>
    <property>
        <name>yarn.resourcemanager.scheduler.address.{{ groups['resourcemanager'][0] }}</name>
        <value>{{ groups['resourcemanager'][0] }}:{{ hadoop.yarn.resourcemanager_scheduler_port }}</value>
    </property>
    <property>
        <name>yarn.resourcemanager.resource-tracker.address.{{ groups['resourcemanager'][0] }}</name>
        <value>{{ groups['resourcemanager'][0] }}:{{ hadoop.yarn.resourcemanager_resource_tracker_port }}</value>
    </property>
    <property>
        <name>yarn.resourcemanager.address.{{ groups['resourcemanager'][0] }}</name>
        <value>{{ groups['resourcemanager'][0] }}:{{ hadoop.yarn.resourcemanager_port }}</value>
    </property>
    <property>
        <name>yarn.resourcemanager.webapp.address.{{ groups['resourcemanager'][0] }}</name>
        <value>{{ groups['resourcemanager'][0] }}:{{ hadoop.yarn.resourcemanager_webapp_port }}</value>
    </property>
    <property>
        <name>yarn.resourcemanager.webapp.https.address.{{ groups['resourcemanager'][0] }}</name>
        <value>{{ groups['resourcemanager'][0] }}:{{ hadoop.yarn.resourcemanager_webapp_https_port }}</value>
    </property>
    <property>
        <name>yarn.resourcemanager.admin.address.{{ groups['resourcemanager'][1] }}</name>
        <value>{{ groups['resourcemanager'][1] }}:{{ hadoop.yarn.resourcemanager_admin_port }}</value>
    </property>
    <property>
        <name>yarn.resourcemanager.scheduler.address.{{ groups['resourcemanager'][1] }}</name>
        <value>{{ groups['resourcemanager'][1] }}:{{ hadoop.yarn.resourcemanager_scheduler_port }}</value>
    </property>
    <property>
        <name>yarn.resourcemanager.resource-tracker.address.{{ groups['resourcemanager'][1] }}</name>
        <value>{{ groups['resourcemanager'][1] }}:{{ hadoop.yarn.resourcemanager_resource_tracker_port }}</value>
    </property>
    <property>
        <name>yarn.resourcemanager.address.{{ groups['resourcemanager'][1] }}</name>
        <value>{{ groups['resourcemanager'][1] }}:{{ hadoop.yarn.resourcemanager_port }}</value>
    </property>
    <property>
        <name>yarn.resourcemanager.webapp.address.{{ groups['resourcemanager'][1] }}</name>
        <value>{{ groups['resourcemanager'][1] }}:{{ hadoop.yarn.resourcemanager_webapp_port }}</value>
    </property>
    <property>
        <name>yarn.resourcemanager.webapp.https.address.{{ groups['resourcemanager'][1] }}</name>
        <value>{{ groups['resourcemanager'][1] }}:{{ hadoop.yarn.resourcemanager_webapp_https_port }}</value>
    </property>
    <property>
        <name>yarn.log.server.url</name>
        <value>{{ groups['jobhistoryserver'][0] }}:{{ hadoop.yarn.jobhistoryserver_http_port }}</value>
    </property>
    <property>
        <name>yarn.resourcemanager.client.thread-count</name>
        <value>50</value>
    </property>
    <property>
        <name>yarn.resourcemanager.scheduler.client.thread-count</name>
        <value>50</value>
    </property>
    <property>
        <name>yarn.resourcemanager.admin.client.thread-count</name>
        <value>1</value>
    </property>
    <property>
        <name>yarn.scheduler.minimum-allocation-mb</name>
        <value>{{ hadoop.yarn.scheduler_min_allocation_mb }}</value>
    </property>
    <property>
        <name>yarn.scheduler.increment-allocation-mb</name>
        <value>{{ hadoop.yarn.scheduler_increment_allocation_mb }}</value>
    </property>
    <property>
        <name>yarn.scheduler.maximum-allocation-mb</name>
        <value>{{ hadoop.yarn.scheduler_max_allocation_mb }}</value>
    </property>
    <property>
        <name>yarn.scheduler.minimum-allocation-vcores</name>
        <value>{{ hadoop.yarn.scheduler_min_allocation_vcores }}</value>
    </property>
    <property>
        <name>yarn.scheduler.increment-allocation-vcores</name>
        <value>{{ hadoop.yarn.scheduler_increment_allocation_vcores }}</value>
    </property>
    <property>
        <name>yarn.scheduler.maximum-allocation-vcores</name>
        <value>{{ hadoop.yarn.scheduler_max_allocation_vcores }}</value>
    </property>
    <property>
        <name>yarn.resourcemanager.amliveliness-monitor.interval-ms</name>
        <value>1000</value>
    </property>
    <property>
        <name>yarn.resourcemanager.am.max-attempts</name>
        <value>2</value>
    </property>
    <property>
        <name>yarn.resourcemanager.container.liveness-monitor.interval-ms</name>
        <value>600000</value>
    </property>
    <property>
        <name>yarn.resourcemanager.nm.liveness-monitor.interval-ms</name>
        <value>1000</value>
    </property>
    <property>
        <name>yarn.nm.liveness-monitor.expiry-interval-ms</name>
        <value>600000</value>
    </property>
    <property>
        <name>yarn.resourcemanager.resource-tracker.client.thread-count</name>
        <value>50</value>
    </property>
    <property>
        <name>yarn.application.classpath</name>
        <value>$HADOOP_HOME/*,$HADOOP_HOME/lib/*</value>
    </property>
    <property>
        <name>yarn.resourcemanager.scheduler.class</name>
        <value>org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.FairScheduler</value>
    </property>
    <property>
        <name>yarn.resourcemanager.max-completed-applications</name>
        <value>10000</value>
    </property>
    <property>
        <name>yarn.nodemanager.log-dirs</name>
        <value>{% for dir in hadoop.yarn.nodemanager_log_dir %}{% if dir != hadoop.yarn.nodemanager_log_dir[0] %},{% endif %}{{ dir }}{% endfor %}</value>
    </property>
    <property>
        <name>yarn.nodemanager.remote-app-log-dir</name>
        <value>/tmp/logs</value>
    </property>
<!--    <property>-->
<!--        <name>yarn.nodemanager.remote-app-log-dir-suffix</name>-->
<!--        <value>logs</value>-->
<!--    </property>-->
    <property>
        <name>yarn.nodemanager.resource.memory-mb</name>
        <value>{{ hadoop.yarn.nodemanager_memory_mb }}</value>
    </property>
    <property>
        <name>yarn.nodemanager.resource.cpu-vcores</name>
        <value>{{ hadoop.yarn.nodemanager_vcores }}</value>
    </property>
    <property>
        <name>yarn.resourcemanager.proxy-user-privileges.enabled</name>
        <value>true</value>
    </property>
    <property>
        <name>yarn.resourcemanager.max-completed-applications</name>
        <value>{{ hadoop.yarn.resourcemanager_max_completed_applications }}</value>
    </property>
    <property>
        <name>yarn.resourcemanager.nodemanagers.heartbeat-interval-ms</name>
        <value>{{ hadoop.yarn.nodemanagers_hearbeat_interval_ms }}</value>
    </property>

</configuration>
